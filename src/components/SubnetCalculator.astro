---
import qs from 'querystring';

interface SubnetDetails {
  networkAddress: string;
  broadcastAddress: string;
  firstUsableHost: string;
  lastUsableHost: string;
  totalHosts: number;
  subnetMask: string;
  cidrNotation: string;
}

// Function to convert CIDR to subnet mask
function cidrToSubnetMask(cidr: number): string {
  return ((0xFFFFFFFF << (32 - cidr)) >>> 0)
    .toString(2)
    .match(/.{8}/g)
    ?.map(bin => parseInt(bin, 2))
    .join('.') || '';
}

function ipToNumber(ip: string): number {
  return ip.split('.').reduce((acc, octet) => (acc * 256) + parseInt(octet), 0);
}

function numberToIp(num: number): string {
  return [
    (num >>> 24) & 255,
    (num >>> 16) & 255,
    (num >>> 8) & 255,
    num & 255
  ].join('.');
}

function calculateSubnet(ipAddress: string, cidrNotation: string): SubnetDetails {
  const cidr = parseInt(cidrNotation.replace('/', ''));
  const subnetMask = cidrToSubnetMask(cidr);

  const ipNum = ipToNumber(ipAddress);
  const maskNum = ipToNumber(subnetMask);

  const networkNum = ipNum & maskNum;
  const networkAddress = numberToIp(networkNum);

  const invertedMask = ~maskNum;
  const broadcastNum = networkNum | invertedMask;
  const broadcastAddress = numberToIp(broadcastNum);

  const firstUsableHost = numberToIp(networkNum + 1);
  const lastUsableHost = numberToIp(broadcastNum - 1);

  const totalHosts = Math.pow(2, 32 - cidr) - 2;

  return {
    networkAddress,
    broadcastAddress,
    firstUsableHost,
    lastUsableHost,
    totalHosts,
    subnetMask,
    cidrNotation: `/${cidr}`
  };
}

const cidrOptions = [
  { value: '/8', label: '/8 (255.0.0.0) - Large network' },
  { value: '/16', label: '/16 (255.255.0.0) - Medium network' },
  { value: '/24', label: '/24 (255.255.255.0) - Small network' },
  { value: '/25', label: '/25 (255.255.255.128) - Very small network' },
  { value: '/26', label: '/26 (255.255.255.192) - Tiny network' },
  { value: '/27', label: '/27 (255.255.255.224) - Smallest standard subnet' },
  { value: '/28', label: '/28 (255.255.255.240) - Minimal subnet' },
  { value: '/29', label: '/29 (255.255.255.248) - Micro subnet' },
  { value: '/30', label: '/30 (255.255.255.252) - Point-to-point link' }
];

// Validate IP address
function isValidIP(ip: string): boolean {
  const ipv4Regex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
  if (!ipv4Regex.test(ip)) return false;
  
  const octets = ip.split('.');
  return octets.every(octet => {
    const num = parseInt(octet, 10);
    return num >= 0 && num <= 255;
  });
}

// Server-side processing
let subnetResult: SubnetDetails | null = null;
let errorMessage: string | null = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    console.log('Form Data:', formData);
    const ipAddress = formData.get('ipAddress') as string;
    const cidrNotation = formData.get('cidrNotation') as string;

    if (!ipAddress || !isValidIP(ipAddress)) {
      errorMessage = 'Invalid IP address. Please enter a valid IPv4 address.';
    } else if (!cidrNotation || !cidrNotation.startsWith('/')) {
      errorMessage = 'Invalid CIDR notation. Please select a valid option.';
    } else {
      try {

        subnetResult = calculateSubnet(ipAddress, cidrNotation);
      } catch (err) {
        console.error('Subnet calculation error:', err.message);
        errorMessage = 'An error occurred while calculating the subnet. Please verify your input.';
      }
    }
  } catch (error) {
    console.error('Form processing error:', error);
    errorMessage = 'An error occurred while processing your request.';
  }
}

---

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center">IPv4 Subnet Calculator</h2>
  
  <form method="POST" class="space-y-4">
    <div>
      <label for="ipAddress" class="block text-sm font-medium text-gray-700">IP Address</label>
      <input 
        type="text" 
        id="ipAddress" 
        name="ipAddress" 
        placeholder="e.g., 192.168.1.1" 
        required 
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
      />
    </div>
    
    <div>
      <label for="cidrNotation" class="block text-sm font-medium text-gray-700">Subnet Mask (CIDR)</label>
      <select 
        id="cidrNotation" 
        name="cidrNotation" 
        required 
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
      >
        {cidrOptions.map((option) => (
          <option value={option.value}>{option.label}</option>
        ))}
      </select>
    </div>
    
    <button 
      type="submit" 
      class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
    >
      Calculate Subnet
    </button>
  </form>

  {errorMessage && (
    <div class="mt-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
      <span class="block sm:inline">{errorMessage}</span>
    </div>
  )}

  {subnetResult && (
    <div class="mt-6 bg-gray-50 p-4 rounded-lg">
      <h3 class="text-xl font-semibold mb-4">Subnet Details</h3>
      <div class="grid grid-cols-2 gap-4">
        <div>
          <p class="font-medium">Network Address:</p>
          <p>{subnetResult.networkAddress}</p>
        </div>
        <div>
          <p class="font-medium">Broadcast Address:</p>
          <p>{subnetResult.broadcastAddress}</p>
        </div>
        <div>
          <p class="font-medium">First Usable Host:</p>
          <p>{subnetResult.firstUsableHost}</p>
        </div>
        <div>
          <p class="font-medium">Last Usable Host:</p>
          <p>{subnetResult.lastUsableHost}</p>
        </div>
        <div>
          <p class="font-medium">Total Hosts:</p>
          <p>{subnetResult.totalHosts}</p>
        </div>
        <div>
          <p class="font-medium">Subnet Mask:</p>
          <p>{subnetResult.subnetMask}</p>
        </div>
        <div>
          <p class="font-medium">CIDR Notation:</p>
          <p>{subnetResult.cidrNotation}</p>
        </div>
      </div>
    </div>
  )}
</div>