---
import qs from 'querystring';

interface SubnetDetails {
  networkAddress: string;
  broadcastAddress: string;
  firstUsableHost: string;
  lastUsableHost: string;
  totalHosts: number;
  subnetMask: string;
  cidrNotation: string;
  ipAddress: string;
  binary: {
    address: string;
    netmask: string;
    wildcard: string;
    network: string;
    broadcast: string;
  };
}

// Function to convert CIDR to subnet mask
function cidrToSubnetMask(cidr: number): string {
  return ((0xFFFFFFFF << (32 - cidr)) >>> 0)
    .toString(2)
    .match(/.{8}/g)
    ?.map(bin => parseInt(bin, 2))
    .join('.') || '';
}

function ipToNumber(ip: string): number {
  return ip.split('.').reduce((acc, octet) => (acc * 256) + parseInt(octet), 0);
}

function numberToIp(num: number): string {
  return [
    (num >>> 24) & 255,
    (num >>> 16) & 255,
    (num >>> 8) & 255,
    num & 255
  ].join('.');
}

function calculateSubnet(ipAddress: string, cidrNotation: string): SubnetDetails {
    const cidr = parseInt(cidrNotation.replace('/', ''));
    const subnetMask = cidrToSubnetMask(cidr);

    const ipNum = ipToNumber(ipAddress);
    const maskNum = ipToNumber(subnetMask);

    const networkNum = ipNum & maskNum;
    const networkAddress = numberToIp(networkNum);

    const invertedMask = ~maskNum >>> 0;
    const broadcastNum = networkNum | invertedMask;
    const broadcastAddress = numberToIp(broadcastNum);

    const firstUsableHost = numberToIp(networkNum + 1);
    const lastUsableHost = numberToIp(broadcastNum - 1);

    const totalHosts = Math.pow(2, 32 - cidr) - 2;

    function toBinary(num: number): string {
        return (num >>> 0)  // Use unsigned right shift to convert to unsigned 32-bit integer
            .toString(2)    // Convert to binary string
            .padStart(32, '0')  // Pad to 32 bits
            .match(/.{8}/g)?.join('.') || '';  // Split into octets
    }

    return {
        ipAddress,
        networkAddress,
        broadcastAddress,
        firstUsableHost,
        lastUsableHost,
        totalHosts,
        subnetMask,
        cidrNotation: `/${cidr}`,
        binary: {
            address: toBinary(ipNum),
            netmask: toBinary(maskNum),
            wildcard: toBinary(invertedMask),
            network: toBinary(networkNum),
            broadcast: toBinary(broadcastNum),
        },
    };
}

const cidrOptions = [
  { value: '/1', label: '/1 (128.0.0.0)', selected: '' },
  { value: '/2', label: '/2 (192.0.0.0)', selected: '' },
  { value: '/3', label: '/3 (224.0.0.0)', selected: '' },
  { value: '/4', label: '/4 (240.0.0.0)', selected: '' },
  { value: '/5', label: '/5 (248.0.0.0)', selected: '' },
  { value: '/6', label: '/6 (252.0.0.0)', selected: '' },
  { value: '/7', label: '/7 (254.0.0.0)', selected: '' },
  { value: '/8', label: '/8 (255.0.0.0)', selected: '' },
  { value: '/9', label: '/9 (255.128.0.0)', selected: '' },
  { value: '/10', label: '/10 (255.192.0.0)', selected: '' },
  { value: '/11', label: '/11 (255.224.0.0)', selected: '' },
  { value: '/12', label: '/12 (255.240.0.0)', selected: '' },
  { value: '/13', label: '/13 (255.248.0.0)', selected: '' },
  { value: '/14', label: '/14 (255.252.0.0)', selected: '' },
  { value: '/15', label: '/15 (255.254.0.0)', selected: '' },
  { value: '/16', label: '/16 (255.255.0.0)', selected: '' },
  { value: '/17', label: '/17 (255.255.128.0)', selected: '' },
  { value: '/18', label: '/18 (255.255.192.0)', selected: '' },
  { value: '/19', label: '/19 (255.255.224.0)', selected: '' },
  { value: '/20', label: '/20 (255.255.240.0)', selected: '' },
  { value: '/21', label: '/21 (255.255.248.0)', selected: '' },
  { value: '/22', label: '/22 (255.255.252.0)', selected: '' },
  { value: '/23', label: '/23 (255.255.254.0)', selected: '' },
  { value: '/24', label: '/24 (255.255.255.0)', selected: 'selected' },
  { value: '/25', label: '/25 (255.255.255.128)', selected: '' },
  { value: '/26', label: '/26 (255.255.255.192)', selected: '' },
  { value: '/27', label: '/27 (255.255.255.224)', selected: '' },
  { value: '/28', label: '/28 (255.255.255.240)', selected: '' },
  { value: '/29', label: '/29 (255.255.255.248)', selected: '' },
  { value: '/30', label: '/30 (255.255.255.252)', selected: '' },
  { value: '/31', label: '/31 (255.255.255.254)', selected: '' }
];

// Validate IP address
function isValidIP(ip: string): boolean {
  const ipv4Regex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
  if (!ipv4Regex.test(ip)) return false;
  
  const octets = ip.split('.');
  return octets.every(octet => {
    const num = parseInt(octet, 10);
    return num >= 0 && num <= 255;
  });
}

// Server-side processing
let subnetResult: SubnetDetails | null = null;
let errorMessage: string | null = null;
let formData: { ipAddress: string; cidrNotation: string } = {
  ipAddress: '192.168.0.1',
  cidrNotation: '/24'
};

if (Astro.request.method === 'POST') {
  try {
    const submittedFormData = await Astro.request.formData();
    console.log('Form Data:', submittedFormData);
    const ipAddress = submittedFormData.get('ipAddress') as string;
    const cidrNotation = submittedFormData.get('cidrNotation') as string;

    // Update formData with the submitted values
    formData = { ipAddress, cidrNotation };

    if (!ipAddress || !isValidIP(ipAddress)) {
      errorMessage = 'Invalid IP address. Please enter a valid IPv4 address.';
    } else if (!cidrNotation || !cidrNotation.startsWith('/')) {
      errorMessage = 'Invalid CIDR notation. Please select a valid option.';
    } else {
      try {
        subnetResult = calculateSubnet(ipAddress, cidrNotation);
      } catch (err) {
        console.error('Subnet calculation error:', err.message);
        errorMessage = 'An error occurred while calculating the subnet. Please verify your input.';
      }
    }
  } catch (error) {
    console.error('Form processing error:', error);
    errorMessage = 'An error occurred while processing your request.';
  }
}

---

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-2xl">
  <h2 class="text-2xl font-bold mb-6 text-center">IPv4 Subnetting</h2>
  
  <form method="POST" class="space-y-4">
    <div>
      <label for="ipAddress" class="block text-sm font-medium text-gray-700">IP Address</label>
      <input 
        type="text" 
        id="ipAddress" 
        name="ipAddress" 
        placeholder="e.g., 192.168.0.1" 
        value={formData.ipAddress} 
        required 
        class="mt-1 block w-full px-4 py-3 border-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
      />
    </div>
    
    <div>
      <label for="cidrNotation" class="block text-sm font-medium text-gray-700">Subnet Mask (CIDR)</label>
      <select 
        id="cidrNotation" 
        name="cidrNotation" 
        required 
        class="mt-1 block w-full px-4 py-3 border-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
      >
        {cidrOptions.map(option => (
          <option 
            value={option.value} 
            selected={formData.cidrNotation === option.value}
          >
            {option.label}
          </option>
        ))}
      </select>
    </div>
    
    <button 
      type="submit" 
      class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
    >
      Calculate Subnet
    </button>
  </form>

  {errorMessage && (
    <div class="mt-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
      <span class="block sm:inline">{errorMessage}</span>
    </div>
  )}

{subnetResult && (
    <div class="mt-6 bg-gray-50 p-4 rounded-lg">
        <h3 class="text-xl font-semibold mb-4">Subnet Details</h3>
        <div class="grid grid-cols-1 gap-4">
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono break-words">
                    <strong>IP Address:</strong> {subnetResult.ipAddress} <br />
                    <span class="text-gray-500 text-xs overflow-x-auto block whitespace-nowrap">
                        Binary: {subnetResult.binary.address}
                    </span>
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono break-words">
                    <strong>Netmask:</strong> {subnetResult.subnetMask} <br />
                    <span class="text-gray-500 text-xs overflow-x-auto block whitespace-nowrap">
                        Binary: {subnetResult.binary.netmask}
                    </span>
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono break-words">
                    <strong>Broadcast Address:</strong> {subnetResult.broadcastAddress} <br />
                    <span class="text-gray-500 text-xs overflow-x-auto block whitespace-nowrap">
                        Binary: {subnetResult.binary.broadcast}
                    </span>
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono break-words">
                    <strong>Wildcard Address:</strong> {numberToIp(~ipToNumber(subnetResult.subnetMask) >>> 0)} <br />
                    <span class="text-gray-500 text-xs overflow-x-auto block whitespace-nowrap">
                        Binary: {subnetResult.binary.wildcard}
                    </span>
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono break-words">
                    <strong>Network Address:</strong> {subnetResult.networkAddress}{subnetResult.cidrNotation} <br />
                    <span class="text-gray-500 text-xs overflow-x-auto block whitespace-nowrap">
                        Binary: {subnetResult.binary.network}
                    </span>
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono">
                    <strong>HostMin:</strong> {subnetResult.firstUsableHost}
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono">
                    <strong>HostMax:</strong> {subnetResult.lastUsableHost}
                </p>
            </div>
            <div class="bg-white p-3 rounded-lg shadow-sm">
                <p class="font-mono">
                    <strong>Hosts/Net:</strong> {subnetResult.totalHosts}
                </p>
            </div>
        </div>
    </div>
  )}

</div>